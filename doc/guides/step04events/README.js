Ext.data.JsonP.step04events({"guide":"<h1 id='step04events-section-step.4-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E5%87%A6%E7%90%86'>Step.4 イベントの処理</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/step04events-section-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%84%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC%E5%AE%9A%E7%BE%A9%E3%81%AE%E8%BF%BD%E5%8A%A0'>ボタンやリスナー定義の追加</a></li>\n<li><a href='#!/guide/step04events-section-main-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE-viewcontroller-%E3%82%92%E7%B7%A8%E9%9B%86'>Main ビューの ViewController を編集</a></li>\n<li><a href='#!/guide/step04events-section-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E6%B4%BB%E6%80%A7%E5%8C%96%E5%88%B6%E5%BE%A1'>ボタンの活性化制御</a></li>\n<li><a href='#!/guide/step04events-section-%E3%81%AE%E3%81%93%E3%82%8A%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC%E3%82%92%E8%BF%BD%E5%8A%A0'>のこりのリスナーを追加</a></li>\n<li><a href='#!/guide/step04events-section-%E7%B7%A8%E9%9B%86%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A7-edit-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88'>編集ボタンで Edit ビューに切り替え</a></li>\n<li><a href='#!/guide/step04events-section-list-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E6%88%BB%E3%82%8B'>List ビューに戻る</a></li>\n<li><a href='#!/guide/step04events-section-%E6%88%BB%E3%82%8B%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A3%85'>戻る処理を実装</a></li>\n</ol>\n</div>\n\n<p>List ビューにツールバーを配置し、イベントの処理をします。\n次の様なことができるようにしましょう。</p>\n\n<ul>\n<li>名簿の追加</li>\n<li>名簿からの削除</li>\n<li>名簿の編集</li>\n</ul>\n\n\n<p>名簿の入力には Step.2 で作った Edit ビューを使います。</p>\n\n<ul>\n<li>ViewController</li>\n</ul>\n\n\n<h2 id='step04events-section-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%84%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC%E5%AE%9A%E7%BE%A9%E3%81%AE%E8%BF%BD%E5%8A%A0'>ボタンやリスナー定義の追加</h2>\n\n<p>ボタンを List ビューに追加します。\n今回は、イベント処理を MainController で行いますので、\nボタンの追加も、Main ビュー側に記述します。</p>\n\n<p><strong>app/view/main/Main.js</strong></p>\n\n<pre><code>    items:[{\n        xtype:      'mylist',\n        reference:  'mylist',\n        tbar: [{\n            text:       '追加',\n            handler:    'onAddList'\n        },{\n            text:       '削除',\n            disabled:   true,\n            reference:  'removeButton',\n            handler:    'onRemoveList'\n        },{\n            text:       '編集',\n            disabled:   true,\n            reference:  'editButton',\n            handler:    'onEditList'\n        }],\n        listeners: {\n            itemdblclick:   'onEditList',\n            selectionchange:'onListSelect'\n        }\n    },{\n</code></pre>\n\n<ul>\n<li><code>handler</code></li>\n<li><code>reference</code></li>\n<li><code>listeners</code></li>\n</ul>\n\n\n<h2 id='step04events-section-main-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE-viewcontroller-%E3%82%92%E7%B7%A8%E9%9B%86'>Main ビューの ViewController を編集</h2>\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<pre><code>Ext.define('MyList.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n\n    alias: 'controller.main',\n\n    onAddList: function() {\n        console.log('add list');\n    }\n\n});\n</code></pre>\n\n<ul>\n<li><code>onAddList:</code> がイベントリスナー</li>\n<li>追加ボタンでコンソールに 'add list' と表示されるのを確認</li>\n</ul>\n\n\n<h2 id='step04events-section-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E6%B4%BB%E6%80%A7%E5%8C%96%E5%88%B6%E5%BE%A1'>ボタンの活性化制御</h2>\n\n<ul>\n<li>List が選択状態になったら、「編集」「削除」ボタンを有効化する</li>\n</ul>\n\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<pre><code>onListSelect: function(view, selected) {\n    var me = this,\n        flag = selected.length === 0,\n        editButton = me.lookupReference('editButton'),\n        removeButton = me.lookupReference('removeButton');\n\n    editButton.setDisabled(flag);\n    removeButton.setDisabled(flag);\n}\n</code></pre>\n\n<ul>\n<li><code>selectionchange</code> イベント</li>\n<li><code>lookupReference</code></li>\n</ul>\n\n\n<h2 id='step04events-section-%E3%81%AE%E3%81%93%E3%82%8A%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC%E3%82%92%E8%BF%BD%E5%8A%A0'>のこりのリスナーを追加</h2>\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<pre><code>onEditList: function() {\n    console.log('edit list');\n},\n\nonRemoveList: function() {\n    console.log('remove list');\n}\n</code></pre>\n\n<ul>\n<li>今のところは <code>console.log</code> のみ記述。</li>\n<li>リスナーが呼び出されていることを確認</li>\n</ul>\n\n\n<h2 id='step04events-section-%E7%B7%A8%E9%9B%86%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A7-edit-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88'>編集ボタンで Edit ビューに切り替え</h2>\n\n<p>編集ボタンを押したときに、表示を Edit ビューに切り替えるのを実装します。\nその時にはもちろん一覧のデータをフォームにセットします。</p>\n\n<p>Main ビューに <code>reference</code> を追加します。</p>\n\n<p><strong>app/view/main/Main.js</strong></p>\n\n<pre><code>    region:     'center',\n    xtype:      'container',\n    reference:  'center',\n    items:[{\n        xtype:      'mylist',\n        reference:  'mylist',\n</code></pre>\n\n<p>と</p>\n\n<pre><code>    },{\n        xtype:      'myedit',\n        reference:  'myedit'\n</code></pre>\n\n<p>次の3つの <code>reference</code> を追加しました。</p>\n\n<ul>\n<li><code>center</code></li>\n<li><code>mylist</code></li>\n<li><code>myedit</code></li>\n</ul>\n\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<pre><code>setActiveItem: function(panel) {\n    var me = this,\n        center = me.lookupReference('center');\n\n    center.getLayout().setActiveItem(panel);\n},\n\nonEditList: function() {\n    var me = this,\n        list = me.lookupReference('mylist'),\n        edit = me.lookupReference('myedit'),\n        selected = list.getSelection(),\n        vmodel = edit.getViewModel();\n\n    if( selected.length &gt; 0 ) {\n        vmodel.setData({\n            rec: selected[0]\n        });\n        me.setActiveItem(edit);\n    }\n},\n</code></pre>\n\n<ul>\n<li><code>setActiveItem</code> メソッド\n\n<ul>\n<li>center パネルのアクティブな子アイテムを切り替えます</li>\n</ul>\n</li>\n<li><code>getViewModel</code>\n\n<ul>\n<li>ビューに関連するビューモデルを取得できます</li>\n</ul>\n</li>\n</ul>\n\n\n<h2 id='step04events-section-list-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E6%88%BB%E3%82%8B'>List ビューに戻る</h2>\n\n<p>これで「編集」ボタンで Edit ビューが表示されますが、\nこのままでは List ビューに戻れないので、戻る処理を実装します。</p>\n\n<p><strong>app/view/main/Main.js</strong></p>\n\n<p>Edit ビューにツールバー追加</p>\n\n<pre><code>        xtype:      'myedit',\n        reference:  'myedit',\n        fbar: [{\n            text: '登録',\n            handler: 'onSubmit'\n        },{\n            text: 'キャンセル',\n            handler: 'onCancel'\n        }]\n</code></pre>\n\n<ul>\n<li><code>fbar</code></li>\n</ul>\n\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<p>イベントリスナーを追加。まずは <code>console.log</code> で。</p>\n\n<pre><code>onSubmit: function() {\n    console.log('submit');\n},\n\nonCancel: function() {\n    console.log('cancel');\n}\n</code></pre>\n\n<ul>\n<li>イベント確認</li>\n</ul>\n\n\n<h2 id='step04events-section-%E6%88%BB%E3%82%8B%E5%87%A6%E7%90%86%E3%82%92%E5%AE%9F%E8%A3%85'>戻る処理を実装</h2>\n\n<p><strong>app/view/main/MainController.js</strong></p>\n\n<pre><code>onSubmit: function() {\n    var me = this,\n        list = me.lookupReference('mylist');\n\n    me.setActiveItem(list);\n},\n</code></pre>\n\n<ul>\n<li>戻ることを確認します。</li>\n<li>データが変更されたらグリッドが更新されることを確認します。</li>\n<li>ダーティマークが消えないのを確認します。</li>\n</ul>\n\n","title":"Step.4 イベントの処理"});